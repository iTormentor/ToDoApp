<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--
    GroupID og artifactID til ditt prosjekt. Husk å endre dette til riktige verdier for ditt prosjekt!!
    -->
    <groupId>no.ntnu.idata1002</groupId>
    <artifactId>TODO-APP</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <javafx.version>13</javafx.version>
    </properties>

    <!--
     For å bygge prosjektet riktig, og for å forenkle kjøring av prosjektet under utvikling, må vi
     legge til en javafx-mave plugin. Her setter vi også hvilken klasse som er main-klassen
     (klassen med public static void main()-metoden i).
     Denne plugin gir 3 nye maven goals:
             javafx:compile - som vil bygge prosjektet riktig
             javafx:run - som vil kjøre prosjektet
             javafx:jlink - som kan brukes for å lage et ferdig kjørbart oppsett som du kan distribuere
    -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>0.0.3</version>
                <configuration>
                    <!--
                    Tillegg for JLink
                    -->
                    <release>${maven.compiler.target}</release>
                    <jlinkImageName>hellofx</jlinkImageName>
                    <launcher>launcher</launcher>
                    <!--
                    Main-klassen i prosjektet ditt
                    -->
                    <mainClass>no.ntnu.idata1002.MainApp</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!--
    Her legger vi inn avhengighet til JavaFX-biblioteket. Det er tilstrekkelig å legge inn
    artifakten javafx-controls.
    Her ser vi også hvordan vi kan opprette "variabler" i en POM-fil, og referere til variabelen senere.
    ${javafx.version} refererer til "propertien" javafx.version som er definert under properties-delen
    øverst i prosjektfilen.
    -->
    <dependencies>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>17-ea+5</version>
        </dependency>
    </dependencies>

</project>